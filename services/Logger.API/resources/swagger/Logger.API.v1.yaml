openapi: 3.0.0
info:
  title: o-bank Logger API
  description: Logger REST API for o-bank. This API has whole operations about logs which be consume by ui.<br>Developed in NodeJS (Express), Cassandra
  version: 1.0.0
  contact:
    name: Onur Ã–ZEL
    url: https://github.com/onur-ozel/o-bank
    email: onurozel41@gmail.com
  license:
    name: MIT License
    url: https://github.com/onur-ozel/o-bank/blob/master/LICENSE
tags:
  - name: Error Log
    description: Operations about error logs.
  - name: Performance Log
    description: Operations about performance logs.
paths:
  /logger/api/v1/error-log:
    post:
      tags:
        - Error Log
      summary: Creates new error log
      requestBody:
        description: Parameter object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorLog'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    put:
      tags:
        - Error Log
      summary: Update an existing error log.
      description: Id field must be filled.
      requestBody:
        description: Error log object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ErrorLog'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
  /logger/api/v1/error-log/{id}:
    get:
      tags:
        - Error Log
      summary: Get error log by id.
      parameters:
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
    delete:
      tags:
        - Error Log
      summary: Deletes an existing error log by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
  /logger/api/v1/error-log/findByEnvironment/{environment}:
    get:
      tags:
        - Error Log
      summary: Get error log by environment.
      parameters:
        - environment:
          name: environment
          in: path
          description: Environment name.
          required: true
          schema:
            type: string
            example: Customer.API    
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      

  /logger/api/v1/performance-log:
    post:
      tags:
        - Performance Log
      summary: Creates new performance log
      requestBody:
        description: Log object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceLog'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    put:
      tags:
        - Performance Log
      summary: Update an existing performance log.
      description: Id field must be filled.
      requestBody:
        description: Performance log object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PerformanceLog'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
  /logger/api/v1/performance-log/{id}:
    get:
      tags:
        - Performance Log
      summary: Get performance log by id.
      parameters:
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
    delete:
      tags:
        - Performance Log
      summary: Deletes an existing error log by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
  /logger/api/v1/performance-log/findByTopic/{topic}:
    get:
      tags:
        - Performance Log
      summary: Get performance log by topic.
      parameters:
        - topic:
          name: topic
          in: path
          description: Topic name.
          required: true
          schema:
            type: string
            example: AccountCreateTimeMeasurement    
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PerformanceLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
components:
  schemas:
    ModelBase:
      type: object
      properties:
        id:
          type: string
          description: Guid id.
          example: be5d9875-38d9-43be-86e7-9117ff3385d1 
        state:
          type: boolean
          readOnly: true
          description: Records valid or invalid state.
          example: true    
        sessionId:
          type: string
          description: Record created user session id.
          example: MVG9lKcPoNINVBIPJjdw1J9LLJbP_pqwoJYyuis 
        lastModifiedDate:
          type: string
          format: datetime
          description: Record last modification date time.
          example: '2018-08-17 02:44:22'      
    LogBase:
      type: object
      properties:
        environment:
          type: string
          description: Log environment. Customer.API, Mobile.Client etc.
          example: Customer.API   
        topic:
          type: string
          description: Log topic. Meaningful and trackable for handled logs. InvalidCustomerNumberException, AccountCreateTimeMeasurement, JavascriptError etc.
          example: AccountCreateTimeMeasurement           
    ErrorLog:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - $ref: '#/components/schemas/LogBase'
        - type: object
          properties:
            type:
              type: string
              description: Error type.
              example: NullPointerException
            code:
              type: string
              description: Error code.
              example: "12345"
            level:
              type: string
              description: Error level.
              enum: [Error, Fatal, Warning, Info, Debug]
              example: Error   
            title:
              type: string
              description: User friendly error message title.
              example: Invalid Fields!.                     
            message:
              type: string
              description: User friendly error message.
              example: Invalid field name used in searching.
            stackTrace:
              type: string
              description: Error stack trace. It can be null for securtiy reasons.
            help:
              type: string
              description: Help url or instructions for taken error.
    PerformanceLog:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - $ref: '#/components/schemas/LogBase'
        - type: object
          properties:                  
            message:
              type: string
              description: User friendly message.
              example: Invalid field name used in searching.
            stackTrace:
              type: string
              description: Trace, name of method, code block which performance measurement is made.
              example: Invalid field name used in searching. 
            startTime:
              type: string
              format: datetime
              description: Measurement start time.
              example: '2018-08-17 02:44:22'   
            endTime:
              type: string
              format: datetime
              description: Measurement end time.
              example: '2018-08-17 02:44:22'   
            elapsedMiliSecond:
              type: int
              format: Int64
              description: Elapsed time in milisecond.
              example: 192939                                                                                                                               
  parameters:
    id:
      name: id
      in: path
      description: Unique id.
      required: true
      schema:
        type: string
        description: Guid id.
        example: be5d9875-38d9-43be-86e7-9117ff3385d1
  responses:
    500ApiError:
      description: API malfunction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorLog'
    400InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorLog'