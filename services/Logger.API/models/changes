errorLogger.js


var cassandra = require("../infrastructure/configuration/cassandraConnection");

exports.getErrorLogs = (req, res, next) => {
    cassandra.instance.ErrorLog.find({}, function (err, errorLogs) {
        if (err) {
            console.log(err);
            res.status(200).json(123);;
        }

        res.status(200).json(errorLogs);
    });
};

exports.addErrorLog = (req, res, next) => {
    console.log('add');
    const errorLog = new cassandra.instance.ErrorLog({
        ...req.body
    });

    errorLog.save(function (err) {
        if (err) {
            console.log(err);
            return;
        }
        console.log('inserted!');

        res.status(200).json(errorLog);
    });
};


exports.updateErrorLog = (req, res, next) => {
    cassandra.instance.ErrorLog.findOne({ id: req.body.id }, function (err, errorLog) {
        const updatedLog = new cassandra.instance.ErrorLog({
            ...req.body
        });

        errorLog = updatedLog;

        errorLog.save(function (err) {
            if (err) {
                console.log(err);
                return;
            }
            console.log('updated!');
            res.status(200).json(updatedLog);
        });
    });
};

exports.deleteErrorLog = (req, res, next) => {
    cassandra.instance.ErrorLog.findOne({ id: req.params.id }, function (err, errorLog) {
        errorLog.delete(function (err) {
            if (err) {
                console.log(err);
                return;
            }
            console.log('deleted!');
            res.status(200);
        });
    });
};

exports.getErrorLogById = (req, res, next) => {
    cassandra.instance.ErrorLog.findOne({ id: req.params.id }, function (err, errorLog) {
        res.status(200).json(errorLog);
    });
};


----------------

cassandraConnection.js

var ExpressCassandra = require('express-cassandra');

var ErrorLog = require("../../models/ErrorLog");
var PerformanceLog = require("../../models/PerformanceLog");

var cassandra = ExpressCassandra.createClient({
    clientOptions: {
        contactPoints: ['localhost'],
        protocolOptions: { port: 9042 },
        keyspace: 'log',
        queryOptions: { consistency: ExpressCassandra.consistencies.one }
    },
    ormOptions: {
        defaultReplicationStrategy: {
            class: 'SimpleStrategy',
            replication_factor: 1
        },
        disableTTYConfirmation: true,
        migration: 'safe'
    }
});

cassandra.loadSchema('ErrorLog', ErrorLog).syncDB(function (err, result) {
    if (err) throw err;
});

cassandra.loadSchema('PerformanceLog', PerformanceLog).syncDB(function (err, result) {
    if (err) throw err;
});

module.exports = cassandra;

---------------

logdb-init.cql


CREATE KEYSPACE IF NOT EXISTS log WITH replication = 
{'class':'SimpleStrategy','replication_factor':'1'};

CREATE TABLE log."ErrorLogs" ( 
    "id" text PRIMARY KEY,
    "state" boolean,
    "sessionId" text,
    "lastModifiedDate" timestamp,
    "environment" text,
    "topic" text,
    "type" text,
    "code" text,
    "level" text,
    "title" text,
    "message" text,
    "stackTrace" text,
    "help" text
);

CREATE TABLE log."PerformanceLogs" ( 
    "id" text PRIMARY KEY,
    "state" boolean,
    "sessionId" text,
    "lastModifiedDate" timestamp,
    "environment" text,
    "topic" text,
    "message" text,
    "stackTrace" text,
    "startTime" timestamp,
    "endTime" timestamp,
    "elapsedMiliSecond" bigint
);


INSERT INTO log."ErrorLogs" (id,topic) VALUES ('12345','ErrorLog');
INSERT INTO log."PerformanceLogs" (id,topic) VALUES ('12346','PerformanceLog');


-------------------

ErrorLog.js

module.exports = {
    fields: {
        id: "text",
        state: "boolean",
        sessionId: "text",
        lastModifiedDate: "timestamp",
        environment: "text",
        topic: "text",
        type: "text",
        code: "text",
        level: "text",
        title: "text",
        message: "text",
        stackTrace: "text",
        help: "text"
    },
    key: ["id"],
    table_name: "ErrorLogs"
};

--------------

PerformanceLog.js

module.exports = {
    fields: {
        id: "text",
        state: "boolean",
        sessionId: "text",
        lastModifiedDate: "timestamp",
        environment: "text",
        topic: "text",
        message: "text",
        stackTrace: "text",
        startTime: "timestamp",
        endTime: "timestamp",
        elapsedMiliSecond: "bigint"
    },
    key: ["id"],
    table_name: "PerformanceLogs"
};


------------------

errorLogger.js


var express = require('express');
var router = express.Router();

const ErrorLoggerController = require('../controllers/errorLogger');

router.get('/', ErrorLoggerController.getErrorLogs);

router.post('/', ErrorLoggerController.addErrorLog);

router.put('/', ErrorLoggerController.updateErrorLog);

router.delete('/:id', ErrorLoggerController.deleteErrorLog);

router.get('/:id', ErrorLoggerController.getErrorLogById);

module.exports = router;


------------

app.js


var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
// var uuidv1 = require('uuid/v1');

var app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(
    express.urlencoded({
        extended: false
    })
);
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// var models = require("./infrastructure/configuration/cassandraConnection");

// var performance = new models.instance.PerformanceLog({
//     id: uuidv1(),
//     state: true,
//     sessionId: "MVG9lKcPoNINVBIPJjdw1J9LLJbP_pqwoJYyuis",
//     lastModifiedDate: new Date(),
//     logType: "Performance",
//     environment: "Server",
//     type: "APIResponse",
//     message: "performance message",
//     stackTrace: "trace",
//     startTime: new Date((new Date()).getTime() - 1233),
//     endTime: new Date((new Date()).getTime() + 1233),
//     elapsedMiliSecond: 123123
// });
// performance.save(function (err) {
//     if (err) {
//         console.log(err);
//         return;
//     }
//     console.log('saved performance!');
// });


// var error = new models.instance.ErrorLog({
//     id: uuidv1(),
//     state: true,
//     sessionId: "MVG9lKcPoNINVBIPJjdw1J9LLJbP_pqwoJYyuis",
//     lastModifiedDate: new Date(),
//     logType: "Error",
//     environment: "Server",
//     type: "NullPointerException",
//     code: 123323,
//     level: "Fatal",
//     title: "title",
//     message: "error message",
//     stackTrace: "trace",
//     help: "hrlp"
// });
// error.save(function (err) {
//     if (err) {
//         console.log(err);
//         return;
//     }
//     console.log('saved error!');
// });

//swagger utilization
const swaggerUi = require('swagger-ui-express');
const yaml = require('yamljs');
const swaggerDoc = yaml.load('./resources/swagger/Logger.API.v1.yaml');
app.use('/logger/swagger', swaggerUi.serve, swaggerUi.setup(swaggerDoc));

// routers
var errorLoggerRouter = require('./routes/errorLogger');
app.use('/logger/api/v1/error-log', errorLoggerRouter);
var performanceLoggerRouter = require('./routes/performanceLogger');
app.use('/logger/api/v1/performance-log', performanceLoggerRouter);

app.listen(8080, function () {
    console.log('Ready on port 8080');
});

module.exports = app;



-----------------

Logger.API.v1.yaml


openapi: 3.0.0
info:
  title: o-bank Logger API
  description: Logger REST API for o-bank. This API has whole operations about logs which be consume by ui.<br>Developed in NodeJS (Express), Cassandra
  version: 1.0.0
  contact:
    name: Onur Ã–ZEL
    url: https://github.com/onur-ozel/o-bank
    email: onurozel41@gmail.com
  license:
    name: MIT License
    url: https://github.com/onur-ozel/o-bank/blob/master/LICENSE
tags:
  - name: Error Log
    description: Operations about error logs.
  - name: Performance Log
    description: Operations about performance logs.
paths:
  /logger/api/v1/error-log:
    get:
      tags:
        - Error Log
      summary: Get error log by id.
      parameters:
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
    post:
      tags:
        - Error Log
      summary: Creates new error log
      requestBody:
        description: Parameter object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorLog'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    put:
      tags:
        - Error Log
      summary: Update an existing error log.
      description: Id field must be filled.
      requestBody:
        description: Error log object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ErrorLog'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
  /logger/api/v1/error-log/{id}:
    get:
      tags:
        - Error Log
      summary: Get error log by id.
      parameters:
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
    delete:
      tags:
        - Error Log
      summary: Deletes an existing error log by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    
  /logger/api/v1/performance-log/{id}:
    get:
      tags:
        - Performance
      summary: Get performance log by id.
      parameters:
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceLog'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'    
components:
  schemas:
    ModelBase:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Guid id.
          example: be5d9875-38d9-43be-86e7-9117ff3385d1 
        state:
          type: boolean
          readOnly: true
          description: Records valid or invalid state.
          example: true    
        sessionId:
          type: string
          readOnly: true
          description: Record created user session id.
          example: MVG9lKcPoNINVBIPJjdw1J9LLJbP_pqwoJYyuis 
        lastModifiedDate:
          type: string
          format: datetime
          readOnly: true
          description: Record last modification date time.
          example: '2018-08-17 02:44:22'      
    LogBase:
      type: object
      properties:
        environmentName:
          type: string
          description: Log environment. Customer.API, Mobile.Client etc.
          example: Customer.API   
        topic:
          type: string
          description: Log topic. Meaningful and trackable for handled logs. InvalidCustomerNumberException, AccountCreateTimeMeasurement, JavascriptError etc.
          example: AccountCreateTimeMeasurement           
    Error:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object
          properties:
            type:
              type: string
              description: Error type.
              example: NullPointerException
            code:
              type: string
              description: Error code.
              example: 12345
            level:
              type: string
              description: Error level.
              enum: [Error, Fatal, Warning, Info, Debug]
              example: Error   
            title:
              type: string
              description: User friendly error message title.
              example: Invalid Fields!.                     
            message:
              type: string
              description: User friendly error message.
              example: Invalid field name used in searching.
            stackTrace:
              type: string
              description: Error stack trace. It can be null for securtiy reasons.
            help:
              type: string
              description: Help url or instructions for taken error.    
    ErrorLog:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - $ref: '#/components/schemas/LogBase'
        - type: object
          properties:
            type:
              type: string
              description: Error type.
              example: NullPointerException
            code:
              type: string
              description: Error code.
              example: 12345
            level:
              type: string
              description: Error level.
              enum: [Error, Fatal, Warning, Info, Debug]
              example: Error   
            title:
              type: string
              description: User friendly error message title.
              example: Invalid Fields!.                     
            message:
              type: string
              description: User friendly error message.
              example: Invalid field name used in searching.
            stackTrace:
              type: string
              description: Error stack trace. It can be null for securtiy reasons.
            help:
              type: string
              description: Help url or instructions for taken error.
    PerformanceLog:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - $ref: '#/components/schemas/LogBase'
        - type: object
          properties:                  
            message:
              type: string
              description: User friendly message.
              example: Invalid field name used in searching.
            stackTrace:
              type: string
              description: Trace, name of method, code block which performance measurement is made.
              example: Invalid field name used in searching. 
            startTime:
              type: string
              format: datetime
              description: Measurement start time.
              example: '2018-08-17 02:44:22'   
            endTime:
              type: string
              format: datetime
              description: Measurement end time.
              example: '2018-08-17 02:44:22'   
            elapsedMiliSecond:
              type: int
              format: Int64
              description: Elapsed time in milisecond.
              example: 192939                                                                                                                               
  parameters:
    limit:
      name: limit
      in: query
      description: Limits return data count.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 10
      schema:
        type: integer
        format: int32
        minimum: 1
    offset:
      name: offset
      in: query
      description: Offset data value.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 0
      schema:
        type: integer
        format: int32
        minimum: 0
    sorts:
      name: sorts
      in: query
      description: Sort by columns. Multiple column can be provided by comma seperated. Use + for desc - for asc.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: +field_name1,-field_name2
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: Filters result data with given field names. Multiple column can be provided by comma seperated.
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1,field_name2
      schema:
        type: string
    searches:
      name: searches
      in: query
      description: Searches data with given conditions. Multiple column can be provided by comma seperated.<br>Operators can be used =, !=, >, <, >=, <=, % (like), !% (notlike), ^% (ends with), %^ (starts with), !^% (not ends with), !%^ (not starts with)
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1[>=]250,field_name2[<]500
      schema:
        type: string        
    id:
      name: id
      in: path
      description: Unique id.
      required: true
      schema:
        type: string
        description: Guid id.
        example: be5d9875-38d9-43be-86e7-9117ff3385d1
    environment:
      name: environment
      in: path
      description: Log environment.
      required: true
      schema:
        type: string
        description: Log environment.
        enum: [Client, Server]
        example: Server      
  responses:
    500ApiError:
      description: API malfunction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    400InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
