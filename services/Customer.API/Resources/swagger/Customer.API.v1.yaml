openapi: 3.0.0
info:
  title: o-bank Customer API
  description: Customer REST API for o-bank. This API has whole operations about retail and corporate customers..<br>Developed in .NET Core WebAPI
  version: 1.0.0
  contact:
    name: Onur Ã–ZEL
    url: https://github.com/onur-ozel/o-bank
    email: onurozel41@gmail.com
  license:
    name: MIT License
    url: https://github.com/onur-ozel/o-bank/blob/master/LICENSE
tags:
  - name: Retail Customer
    description: Operations about retail customers.
  - name: Corporate Customer
    description: Operations about corporate customers.
  - name: Customer
    description: Common operations about customers.    
paths:
  /customer/api/v1/retail-customers:
    get:
      tags:
        - Retail Customer
      summary: Gets retail customers
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - allOf:
            - $ref: '#/components/parameters/sorts'
          example: +id,-nationalId
        - allOf:
            - $ref: '#/components/parameters/fields'
          example: customerNumber,nationality,nationalId
        - allOf:
            - $ref: '#/components/parameters/searches'  
          example: nationality[=]TUR,nationalId[%^]12345
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetailCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Retail Customer
      summary: Creates new retail customer
      description: Id and customer number is generated in api.
      requestBody:
        description: Customer object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetailCustomer'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Retail Customer
      summary: Update an existing customer.
      description: Id field must be filled.
      requestBody:
        description: Customer object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RetailCustomer'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/retail-customers/{id}:
    delete:
      tags:
        - Retail Customer
      summary: Deletes an existing customer by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Retail Customer
      summary: Get customer by id.
      parameters:
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 

  /customer/api/v1/corporate-customers:
    get:
      tags:
        - Corporate Customer
      summary: Gets corporate customers
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - allOf:
            - $ref: '#/components/parameters/sorts'
          example: +id,-taxId
        - allOf:
            - $ref: '#/components/parameters/fields'
          example: customerNumber,taxId,name
        - allOf:
            - $ref: '#/components/parameters/searches'  
          example: taxId[%^]12345
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorporateCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Corporate Customer
      summary: Creates new corporate customer
      description: Id and customer number is generated in api.
      requestBody:
        description: Customer object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporateCustomer'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Corporate Customer
      summary: Update an existing customer.
      description: Id field must be filled.
      requestBody:
        description: Customer object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CorporateCustomer'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/corporate-customers/{id}:
    delete:
      tags:
        - Corporate Customer
      summary: Deletes an existing customer by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Corporate Customer
      summary: Get customer by id.
      parameters:
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 

  /customer/api/v1/customers/{customerNumber}/addresses:
    get:
      tags:
        - Customer
      summary: Gets customer addresses
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber          
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - allOf:
            - $ref: '#/components/parameters/sorts'
          example: +id,-country
        - allOf:
            - $ref: '#/components/parameters/fields'
          example: customerNumber,countryCode
        - allOf:
            - $ref: '#/components/parameters/searches'  
          example: country[=]Netherlands
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Customer
      summary: Creates new customer's address 
      description: Id is generated in api.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber         
      requestBody:
        description: Address object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Customer
      summary: Update an existing customer's address.
      description: Id field must be filled.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber         
      requestBody:
        description: Address object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Address'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/customers/{customerNumber}/addresses/{id}:
    delete:
      tags:
        - Customer
      summary: Deletes an existing customer's address by id.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber      
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Customer
      summary: Get customer's address by id.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 

  /customer/api/v1/customers/{customerNumber}/phone-numbers:
    get:
      tags:
        - Customer
      summary: Gets customer phone numbers
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber          
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - allOf:
            - $ref: '#/components/parameters/sorts'
          example: +id,-phoneNumberType
        - allOf:
            - $ref: '#/components/parameters/fields'
          example: callCode,phoneNumber,phoneNumberType
        - allOf:
            - $ref: '#/components/parameters/searches'  
          example: phoneNumberType[=]Home
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhoneNumber'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Customer
      summary: Creates new customer's phone numbers 
      description: Id is generated in api.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber         
      requestBody:
        description: Phone number object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumber'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Customer
      summary: Update an existing customer's phone numbers.
      description: Id field must be filled.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber         
      requestBody:
        description: Phone numbers object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/customers/{customerNumber}/phone-numbers/{id}:
    delete:
      tags:
        - Customer
      summary: Deletes an existing customer's phone numbers by id.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber      
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Customer
      summary: Get customer's phone numbers by id.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/customerNumber'
          name: customerNumber
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
components:
  schemas:
    ModelBase:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Guid id.
          example: be5d9875-38d9-43be-86e7-9117ff3385d1 
        state:
          type: boolean
          readOnly: true
          description: Records valid or invalid state.
          example: true    
        createdUser:
          type: string
          readOnly: true
          description: Record created user.
          example: T324651 
        createdDate:
          type: string
          format: datetime
          readOnly: true
          description: Record creation date time.
          example: '2018-08-17 02:44:22'                      
    Error:
      type: object
      properties:
        type:
          type: string
          description: Error type.
          example: NullPointerException
        code:
          type: string
          description: Error code.
          example: 12345
        level:
          type: string
          description: Error level.
          enum: [Error, Fatal, Warning, Info, Debug]
          example: Error          
        message:
          type: string
          description: User friendly error message.
          example: Invalid field name used in searching.
        stackTrace:
          type: string
          description: Error stack trace. It can be null for securtiy reasons.
        help:
          type: string
          description: Help url or instructions for taken error.
    Log:
      type: object
      properties:
        type:
          type: string
          description: Log type.
          enum: [Error, CRUDProcess, Info]
          example: Error
        environment:
          type: string
          description: Log environment.
          enum: [Client, Server]
          example: Server   
        logObject:
          type: object
          description: Log object.
    Address:
      description: 
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object
          properties:
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Customer number.
              example: 100000                     
            countryName:
              type: string
              description: Country name.
              example: Netherlands
            provinceName:
              type: string
              description: City/Region name.
              example: Provincie Noord-Holland
            districtName:
              type: string
              description: City's district name.
              example: Amsterdam-Oost
            addressLine:
              type: string
              description: Street address, unit, building, floor etc..
              example: 41 Russell Trail
            postalCode:
              type: string
              description: Address zip/postal code.
              example: 1094
            addressType:
              type: string
              description: Address type.
              enum: [Home, Work]
              example: Home   
    PhoneNumber:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object    
          properties:
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Customer number.
              example: 100000          
            phoneNumber:
              type: number
              format: int32
              description: Phone number
              example: +57 558 934 5079
            phoneNumberType:
              type: string
              description: Phone number type.
              enum: [Home, Work]
              example: Home                    
    Customer:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object      
          properties:      
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Customer number.
              example: 100000
            status:
              type: string
              description: Customer status.
              enum: [Active, Closed]
              example: Active   
            email:
              type: string
              description: Customer email.
              example: iphillcockx@nps.gov                                     
    RetailCustomer:
      description: Retail customer is as self representative as he/she will come up to use services for themselves, using their own money 
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            firstName:
              type: string
              description: Retail customer first name.
              example: Ileane
            lastName:
              type: string
              description: Retail customer last name.
              example: Phillcock   
            nationality:
              type: string
              description: Retail customer nationality.
              example: NL                            
            nationalId:
              type: number
              format: int64
              description: Retail customer national id.
              example: 56855175784
            gender:
              type: string
              description: Customer gender.
              enum: [Female,Male]
              example: Female
            birthPlace:
              type: string
              description: Retail customer birth place.
              example: Apeldoorn    
            birthDate:
              type: string
              format: date
              description: Retail customer birth date.
              example: 5/2/1970   
            companyName:
              type: string
              description: Retail customer company name.
              example: Mudo 
            department:
              type: string
              description: Retail customer department.
              example: Research and Development 
            jobTitle:
              type: string
              description: Retail customer job title.
              example: Office Assistant III                                                                      
    CorporateCustomer:
      description: Corporate customer is a companyâ€™s representative as he/she will come up to use services for the company, using the companyâ€™s money.                 
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            taxId:
              type: number
              format: int64
              description: Corporate customer tax id.
              example: 6750761289      
            name:
              type: string
              description: Corporate customer name.
              example: Moxian, Inc.    
            industry:
              type: string
              description: Corporate customer industry.
              example: 'Computer Software: Programming, Data Processing'  
            sector:
              type: string
              description: Corporate customer sector.
              example: Technology                                        
  parameters:
    limit:
      name: limit
      in: query
      description: Limits return data count.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 10
      schema:
        type: integer
        format: int32
        minimum: 1
    offset:
      name: offset
      in: query
      description: Offset data value.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 0
      schema:
        type: integer
        format: int32
        minimum: 0
    sorts:
      name: sorts
      in: query
      description: Sort by columns. Multiple column can be provided by comma seperated. Use + for desc - for asc.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: +field_name1,-field_name2
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: Filters result data with given field names. Multiple column can be provided by comma seperated.
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1,field_name2
      schema:
        type: string
    searches:
      name: searches
      in: query
      description: Searches data with given conditions. Multiple column can be provided by comma seperated.<br>Operators can be used =, !=, >, <, >=, <=, % (like), !% (notlike), ^% (ends with), %^ (starts with), !^% (not ends with), !%^ (not starts with)
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1[>=]250,field_name2[<]500
      schema:
        type: string        
    id:
      name: id
      in: path
      description: Unique id.
      required: true
      schema:
        type: string
        description: Guid id.
        example: be5d9875-38d9-43be-86e7-9117ff3385d1
    customerNumber:
      name: customerNumber
      in: path
      description: Unique customer number.
      required: true
      schema:
        type: number
        description: Customer number.
        example: 100000
  responses:
    500ApiError:
      description: API malfunction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    400InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
