openapi: 3.0.0
info:
  title: o-bank Customer API
  description: Customer REST API for o-bank. This API has whole operations about retail and corporate customers..<br>Developed in .NET Core WebAPI
  version: 1.0.0
  contact:
    name: Onur Ã–ZEL
    url: https://github.com/onur-ozel/o-bank
    email: onurozel41@gmail.com
  license:
    name: MIT License
    url: https://github.com/onur-ozel/o-bank/blob/master/LICENSE
tags:
  - name: Retail Customer
    description: Operations about retail customers.
  - name: Corporate Customer
    description: Operations about corporate customers.
  - name: Customer
    description: Common operations about customers.    
paths:
  /customer/api/v1/retail-customers:
    get:
      tags:
        - Retail Customer
      summary: Gets retail customers
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - allOf:
            - $ref: '#/components/parameters/sorts'
          example: +id,-nationalId
        - allOf:
            - $ref: '#/components/parameters/fields'
          example: customerNumber,nationality,nationalId
        - allOf:
            - $ref: '#/components/parameters/searches'  
          example: nationality[=]TUR,nationalId[%^]12345
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetailCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Retail Customer
      summary: Creates new retail customer
      description: Id and customer number is generated in api.
      requestBody:
        description: Customer object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetailCustomer'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Retail Customer
      summary: Update an existing customer.
      description: Id field must be filled.
      requestBody:
        description: Customer object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RetailCustomer'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/retail-customers/{id}:
    delete:
      tags:
        - Retail Customer
      summary: Deletes an existing customer by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Retail Customer
      summary: Get customer by id.
      parameters:
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 

  /customer/api/v1/corporate-customers:
    get:
      tags:
        - Corporate Customer
      summary: Gets corporate customers
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - allOf:
            - $ref: '#/components/parameters/sorts'
          example: +id,-taxId
        - allOf:
            - $ref: '#/components/parameters/fields'
          example: customerNumber,taxId,name
        - allOf:
            - $ref: '#/components/parameters/searches'  
          example: taxId[%^]12345
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorporateCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Corporate Customer
      summary: Creates new corporate customer
      description: Id and customer number is generated in api.
      requestBody:
        description: Customer object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporateCustomer'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Corporate Customer
      summary: Update an existing customer.
      description: Id field must be filled.
      requestBody:
        description: Customer object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CorporateCustomer'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/corporate-customers/{id}:
    delete:
      tags:
        - Corporate Customer
      summary: Deletes an existing customer by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Corporate Customer
      summary: Get customer by id.
      parameters:
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 

  /customer/api/v1/customers/{customerId}/addresses:
    get:
      tags:
        - Customer
      summary: Gets customer addresses
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId          
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - allOf:
            - $ref: '#/components/parameters/sorts'
          example: +id,-countryCode
        - allOf:
            - $ref: '#/components/parameters/fields'
          example: customerNumber,countryCode
        - allOf:
            - $ref: '#/components/parameters/searches'  
          example: countryCode[=]TUR
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Customer
      summary: Creates new customer's address 
      description: Id is generated in api.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId         
      requestBody:
        description: Address object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Customer
      summary: Update an existing customer's address.
      description: Id field must be filled.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId         
      requestBody:
        description: Address object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Address'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/customers/{customerId}/addresses/{id}:
    delete:
      tags:
        - Customer
      summary: Deletes an existing customer's address by id.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId      
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Customer
      summary: Get customer's address by id.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 

  /customer/api/v1/customers/{customerId}/phone-numbers:
    get:
      tags:
        - Customer
      summary: Gets customer phone numbers
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId          
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - allOf:
            - $ref: '#/components/parameters/sorts'
          example: +id,-phoneNumberType
        - allOf:
            - $ref: '#/components/parameters/fields'
          example: callCode,phoneNumber,phoneNumberType
        - allOf:
            - $ref: '#/components/parameters/searches'  
          example: phoneNumberType[=]Home
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhoneNumber'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Customer
      summary: Creates new customer's phone numbers 
      description: Id is generated in api.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId         
      requestBody:
        description: Phone number object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumber'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Customer
      summary: Update an existing customer's phone numbers.
      description: Id field must be filled.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId         
      requestBody:
        description: Phone numbers object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/customers/{customerId}/phone-numbers/{id}:
    delete:
      tags:
        - Customer
      summary: Deletes an existing customer's phone numbers by id.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId      
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Customer
      summary: Get customer's phone numbers by id.
      parameters:
        - allOf:
            - $ref: '#/components/parameters/id'
          name: customerId
        - $ref: '#/components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
components:
  schemas:
    ModelBase:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Guid id.
          example: be5d9875-38d9-43be-86e7-9117ff3385d1 
        state:
          type: boolean
          readOnly: true
          description: Records valid or invalid state.
          example: true      
    Error:
      allOf:
        - $ref: '#/components/schemas/ModelBase'    
        - type: object
          properties:
            type:
              type: string
              description: Error type.
              example: NullPointerException
            code:
              type: string
              description: Error code.
              example: 12345
            level:
              type: string
              description: Error level.
              enum: [Error, Fatal, Warning, Info, Debug]
              example: Error          
            message:
              type: string
              description: User friendly error message.
              example: Invalid field name used in searching.
            stackTrace:
              type: string
              description: Error stack trace. It can be null for securtiy reasons.
            help:
              type: string
              description: Help url or instructions for taken error.
    Address:
      description: 
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object
          properties:
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Customer number.
              example: 123456789                     
            countryCode:
              type: string
              description: Countries ISO 3166-1 Alpha-3 code.
              example: TUR
            provinceName:
              type: string
              description: City/Region name.
              example: Ä°stanbul
            districtName:
              type: string
              description: City's district name.
              example: KadÄ±kÃ¶y
            addressLine:
              type: string
              description: Street address, unit, building, floor etc..
              example: X street, Y apartment, floor:2, no:3
            postalCode:
              type: number
              format: int32
              description: Address zip/postal code.
              example: 34744
            addressType:
              type: string
              description: Address type.
              enum: [Home, Work]
              example: Home   
    PhoneNumber:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object    
          properties:
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Customer number.
              example: 123456789          
            callCode:
              type: number
              format: int32
              description: Country call code.
              example: 90
            phoneNumber:
              type: number
              format: int32
              description: Phone number
              example: 1234567
            phoneNumberType:
              type: string
              description: Phone number type.
              enum: [Home, Work]
              example: Home                    
    Customer:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object      
          properties:      
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Customer number.
              example: 123456789
            status:
              type: string
              description: Customer status.
              enum: [Active, Closed]
              example: Active                          
    RetailCustomer:
      description: Retail customer is as self representative as he/she will come up to use services for themselves, using their own money 
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            firstName:
              type: string
              description: Retail customer first name.
              example: Arleta
            lastName:
              type: string
              description: Retail customer last name.
              example: Kleinhaut   
            nationality:
              type: string
              description: Retail customer nationality.
              example: TUR                            
            nationalId:
              type: number
              format: int64
              description: Retail customer national id.
              example: 12345678912
            gender:
              type: string
              description: Customer gender.
              enum: [Female,Male]
              example: Female
            birthPlace:
              type: string
              description: Retail customer birth place.
              example: Ä°stanbul    
            birthDate:
              type: string
              format: date
              description: Retail customer birth date.
              example: 2017-07-21                              
    CorporateCustomer:
      description: Corporate customer is a companyâ€™s representative as he/she will come up to use services for the company, using the companyâ€™s money.                 
      allOf:
        - $ref: '#/components/schemas/DepositAccount'
        - type: object
          properties:
            taxId:
              type: number
              format: int64
              description: Corporate customer tax id.
              example: 1234567890      
            name:
              type: string
              description: Corporate customer name.
              example: Wordware              
  parameters:
    limit:
      name: limit
      in: query
      description: Limits return data count.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 10
      schema:
        type: integer
        format: int32
        minimum: 1
    offset:
      name: offset
      in: query
      description: Offset data value.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 0
      schema:
        type: integer
        format: int32
        minimum: 0
    sorts:
      name: sorts
      in: query
      description: Sort by columns. Multiple column can be provided by comma seperated. Use + for desc - for asc.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: +field_name1,-field_name2
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: Filters result data with given field names. Multiple column can be provided by comma seperated.
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1,field_name2
      schema:
        type: string
    searches:
      name: searches
      in: query
      description: Searches data with given conditions. Multiple column can be provided by comma seperated.<br>Operators can be used =, !=, >, <, >=, <=, % (like), !% (notlike), ^% (ends with), %^ (starts with), !^% (not ends with), !%^ (not starts with)
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1[>=]250,field_name2[<]500
      schema:
        type: string        
    id:
      name: id
      in: path
      description: Unique id.
      required: true
      schema:
        type: string
        description: Guid id.
        example: be5d9875-38d9-43be-86e7-9117ff3385d1
  responses:
    500ApiError:
      description: API malfunction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    400InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
