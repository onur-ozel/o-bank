openapi: 3.0.0
info:
  title: o-bank Desposit API
  description: Deposit REST API for o-bank. This API has whole operations about customers different typed deposit accounts.<br>Developed in Java (Spring Boot)
  version: 1.0.0
  contact:
    name: Onur Ã–ZEL
    url: https://github.com/onur-ozel/o-bank
    email: onurozel41@gmail.com
  license:
    name: MIT License
    url: https://github.com/onur-ozel/o-bank/blob/master/LICENSE
tags:
  - name: Demand Deposit Account
    description: Operations about demand deposit account.
  - name: Time Deposit Account
    description: Operations about time deposit account.
  - name: Saving Deposit Account
    description: Operations about saving deposit account.        
paths:
  /deposit/api/v1/demand-deposit-accounts:
    get:
      tags:
        - Demand Deposit Account
      summary: Gets demand deposit accounts
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#components/parameters/limit'
        - $ref: '#components/parameters/offset'
        - allOf:
            - $ref: '#components/parameters/sorts'
          example: +id,-overDraftLimit
        - allOf:
            - $ref: '#components/parameters/fields'
          example: accountNumber,balance,overDraftLimit
        - allOf:
            - $ref: '#components/parameters/searches'  
          example: balance[>=]250,overDraftLimit[<]500
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DemandDepositAccount'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    post:
      tags:
        - Demand Deposit Account
      summary: Creates new demand deposit account
      description: Id and account number is generated in api.
      requestBody:
        description: Account object that will be created.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/DemandDepositAccount'
                - properties:
                    customerNumber:
                      readOnly: false          
                    currency:
                      readOnly: false                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDepositAccount'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    put:
      tags:
        - Demand Deposit Account
      summary: Update an existing account.
      description: Id field must be filled.
      requestBody:
        description: Account object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/DemandDepositAccount'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
  /deposit/api/v1/demand-deposit-accounts/{id}:
    delete:
      tags:
        - Demand Deposit Account
      summary: Deletes an existing account by id.
      parameters:
        - $ref: '#components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
    get:
      tags:
        - Demand Deposit Account
      summary: Get demand deposit account by id.
      parameters:
        - $ref: '#components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDepositAccount'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
  
  /deposit/api/v1/time-deposit-accounts:
    get:
      tags:
        - Time Deposit Account
      summary: Gets time deposit accounts
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#components/parameters/limit'
        - $ref: '#components/parameters/offset'
        - allOf:
            - $ref: '#components/parameters/sorts'
          example: +id,-interest
        - allOf:
            - $ref: '#components/parameters/fields'
          example: accountNumber,balance,maturity,interest
        - allOf:
            - $ref: '#components/parameters/searches'  
          example: balance[>=]250,interest[<]1.15
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeDepositAccount'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    post:
      tags:
        - Time Deposit Account
      summary: Creates new time deposit account
      description: Id and account number is generated in api.
      requestBody:
        description: Account object that will be created.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TimeDepositAccount'
                - properties:
                    customerNumber:
                      readOnly: false          
                    currency:
                      readOnly: false                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDepositAccount'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    put:
      tags:
        - Time Deposit Account
      summary: Update an existing account.
      description: Id field must be filled.
      requestBody:
        description: Account object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TimeDepositAccount'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
  /deposit/api/v1/time-deposit-accounts/{id}:
    delete:
      tags:
        - Time Deposit Account
      summary: Deletes an existing account by id.
      parameters:
        - $ref: '#components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
    get:
      tags:
        - Time Deposit Account
      summary: Get time deposit account by id.
      parameters:
        - $ref: '#components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeDepositAccount'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      

  /deposit/api/v1/saving-deposit-accounts:
    get:
      tags:
        - Saving Deposit Account
      summary: Gets saving deposit accounts
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#components/parameters/limit'
        - $ref: '#components/parameters/offset'
        - allOf:
            - $ref: '#components/parameters/sorts'
          example: +id,-interest
        - allOf:
            - $ref: '#components/parameters/fields'
          example: accountNumber,balance,interest
        - allOf:
            - $ref: '#components/parameters/searches'  
          example: balance[>=]250,interest[<]1.15
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SavingDepositAccount'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    post:
      tags:
        - Saving Deposit Account
      summary: Creates new saving deposit account
      description: Id and account number is generated in api.
      requestBody:
        description: Account object that will be created.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SavingDepositAccount'
                - properties:
                    customerNumber:
                      readOnly: false          
                    currency:
                      readOnly: false                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavingDepositAccount'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    put:
      tags:
        - Saving Deposit Account
      summary: Update an existing account.
      description: Id field must be filled.
      requestBody:
        description: Account object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SavingDepositAccount'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
  /deposit/api/v1/saving-deposit-accounts/{id}:
    delete:
      tags:
        - Saving Deposit Account
      summary: Deletes an existing account by id.
      parameters:
        - $ref: '#components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
    get:
      tags:
        - Saving Deposit Account
      summary: Get saving deposit account by id.
      parameters:
        - $ref: '#components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavingDepositAccount'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'                
components:
  schemas:
    ModelBase:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Guid id.
          example: be5d9875-38d9-43be-86e7-9117ff3385d1 
        state:
          type: boolean
          readOnly: true
          description: Records valid or invalid state.
          example: true    
    Error:
      allOf:
        - $ref: '#/components/schemas/ModelBase'    
        - type: object
          properties:
            type:
              type: string
              description: Error type.
              example: NullPointerException
            code:
              type: string
              description: Error code.
              example: 12345
            level:
              type: string
              description: Error level.
              enum: [Error, Fatal, Warning, Info, Debug]
              example: Error          
            message:
              type: string
              description: User friendly error message.
              example: Invalid field name used in searching.
            stackTrace:
              type: string
              description: Error stack trace. It can be null for securtiy reasons.
            help:
              type: string
              description: Help url or instructions for taken error.
    DepositAccount:
      allOf:
        - $ref: '#/components/schemas/ModelBase'    
        - type: object    
          properties:        
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Accounts owner customer number.
              example: 123456789
            accountNumber:
              type: integer
              format: int64
              readOnly: true
              description: Account number.
              example: 123456789
            status:
              type: string
              description: Account status.
              enum: [Active, Closed, Blocked]
              example: Active       
            currency:
              type: string
              readOnly: true
              description: Account currency type.
              enum: [TRY, USD, EUR]
              example: USD                    
            balance:
              type: number
              format: double
              readOnly: true
              description: Account balance.
              example: 217.15
    DemandDepositAccount:
      description: Demand deposit is a basic checking account. Consumers deposit money which they can withdraw as desired on demand. 
      allOf:
        - $ref: '#/components/schemas/DepositAccount'
        - type: object
          properties:
            overDraftLimit:
              type: number
              format: double
              description: Account overdraft credit limit.
              example: 100.50
    TimeDepositAccount:
      description: Like a savings account, a time deposit account is an investment vehicle for consumers. Also known as certificates of deposit (CD), time deposit accounts tend to offer a higher rate of return than traditional savings accounts, but the money must stay in the account for a set period of time              
      allOf:
        - $ref: '#/components/schemas/DepositAccount'
        - type: object
          properties:
            maturity:
              type: number
              format: int32
              description: Account maturity in day.
              example: 30      
            interest:
              type: number
              format: double
              description: Interest rate.
              example: 1.23                  
    SavingDepositAccount:
      description: Savings accounts offer account holders interest on their deposits.           
      allOf:
        - $ref: '#/components/schemas/DepositAccount'
        - type: object
          properties:
            interest:
              type: number
              format: double
              description: Daily interest rate.
              example: 1.03  
  parameters:
    limit:
      name: limit
      in: query
      description: Limits return data count.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 10
      schema:
        type: integer
        format: int32
        minimum: 1
    offset:
      name: offset
      in: query
      description: Offset data value.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 0
      schema:
        type: integer
        format: int32
        minimum: 0
    sorts:
      name: sorts
      in: query
      description: Sort by columns. Multiple column can be provided by comma seperated. Use + for desc - for asc.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: +field_name1,-field_name2
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: Filters result data with given field names. Multiple column can be provided by comma seperated.
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1,field_name2
      schema:
        type: string
    searches:
      name: searches
      in: query
      description: Searches data with given conditions. Multiple column can be provided by comma seperated.<br>Operators can be used =, !=, >, <, >=, <=, % (like), !% (notlike), ^% (ends with), %^ (starts with), !^% (not ends with), !%^ (not starts with)
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1[>=]250,field_name2[<]500
      schema:
        type: string        
    id:
      name: id
      in: path
      description: Unique id.
      required: true
      schema:
        type: string
        description: Guid id.
        example: be5d9875-38d9-43be-86e7-9117ff3385d1
  responses:
    500ApiError:
      description: API malfunction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    400InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'





-----------------------



openapi: 3.0.0
info:
  title: o-bank Customer API
  description: Customer REST API for o-bank. This API has whole operations about retail and corporate customers..<br>Developed in .NET Core WebAPI
  version: 1.0.0
  contact:
    name: Onur Ã–ZEL
    url: https://github.com/onur-ozel/o-bank
    email: onurozel41@gmail.com
  license:
    name: MIT License
    url: https://github.com/onur-ozel/o-bank/blob/master/LICENSE
tags:
  - name: Retail Customer
    description: Operations about retail customers.
  - name: Corporate Customer
    description: Operations about corporate customers.
  - name: Customer
    description: Common operations about customers.    
paths:
  /customer/api/v1/retail-customers:
    get:
      tags:
        - Retail Customer
      summary: Gets retail customers
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#components/parameters/limit'
        - $ref: '#components/parameters/offset'
        - allOf:
            - $ref: '#components/parameters/sorts'
          example: +id,-nationalId
        - allOf:
            - $ref: '#components/parameters/fields'
          example: customerNumber,nationality,nationalId
        - allOf:
            - $ref: '#components/parameters/searches'  
          example: nationality[=]TUR,nationalId[%^]12345
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetailCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Retail Customer
      summary: Creates new retail customer
      description: Id and customer number is generated in api.
      requestBody:
        description: Customer object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetailCustomer'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Retail Customer
      summary: Update an existing customer.
      description: Id field must be filled.
      requestBody:
        description: Customer object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RetailCustomer'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/retail-customers/{id}:
    delete:
      tags:
        - Retail Customer
      summary: Deletes an existing customer by id.
      parameters:
        - $ref: '#components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Retail Customer
      summary: Get customer by id.
      parameters:
        - $ref: '#components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 

  /customer/api/v1/corporate-customers:
    get:
      tags:
        - Corporate Customer
      summary: Gets corporate customers
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#components/parameters/limit'
        - $ref: '#components/parameters/offset'
        - allOf:
            - $ref: '#components/parameters/sorts'
          example: +id,-taxId
        - allOf:
            - $ref: '#components/parameters/fields'
          example: customerNumber,taxId,name
        - allOf:
            - $ref: '#components/parameters/searches'  
          example: taxId[%^]12345
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorporateCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Corporate Customer
      summary: Creates new corporate customer
      description: Id and customer number is generated in api.
      requestBody:
        description: Customer object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporateCustomer'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Corporate Customer
      summary: Update an existing customer.
      description: Id field must be filled.
      requestBody:
        description: Customer object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CorporateCustomer'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/corporate-customers/{id}:
    delete:
      tags:
        - Corporate Customer
      summary: Deletes an existing customer by id.
      parameters:
        - $ref: '#components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Corporate Customer
      summary: Get customer by id.
      parameters:
        - $ref: '#components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateCustomer'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 

  /customer/api/v1/customers/{customerId}/addresses:
    get:
      tags:
        - Customer
      summary: Gets customer addresses
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId          
        - $ref: '#components/parameters/limit'
        - $ref: '#components/parameters/offset'
        - allOf:
            - $ref: '#components/parameters/sorts'
          example: +id,-countryCode
        - allOf:
            - $ref: '#components/parameters/fields'
          example: customerNumber,countryCode
        - allOf:
            - $ref: '#components/parameters/searches'  
          example: countryCode[=]TUR
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Customer
      summary: Creates new customer's address 
      description: Id is generated in api.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId         
      requestBody:
        description: Address object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Customer
      summary: Update an existing customer's address.
      description: Id field must be filled.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId         
      requestBody:
        description: Address object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Address'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/customers/{customerId}/addresses/{id}:
    delete:
      tags:
        - Customer
      summary: Deletes an existing customer's address by id.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId      
        - $ref: '#components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Customer
      summary: Get customer's address by id.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId
        - $ref: '#components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 

  /customer/api/v1/customers/{customerId}/phone-numbers:
    get:
      tags:
        - Customer
      summary: Gets customer phone numbers
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId          
        - $ref: '#components/parameters/limit'
        - $ref: '#components/parameters/offset'
        - allOf:
            - $ref: '#components/parameters/sorts'
          example: +id,-phoneNumberType
        - allOf:
            - $ref: '#components/parameters/fields'
          example: callCode,phoneNumber,phoneNumberType
        - allOf:
            - $ref: '#components/parameters/searches'  
          example: phoneNumberType[=]Home
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhoneNumber'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'  
    post:
      tags:
        - Customer
      summary: Creates new customer's phone numbers 
      description: Id is generated in api.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId         
      requestBody:
        description: Phone number object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumber'                                       
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'   
    put:
      tags:
        - Customer
      summary: Update an existing customer's phone numbers.
      description: Id field must be filled.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId         
      requestBody:
        description: Phone numbers object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
  /customer/api/v1/customers/{customerId}/phone-numbers/{id}:
    delete:
      tags:
        - Customer
      summary: Deletes an existing customer's phone numbers by id.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId      
        - $ref: '#components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'     
    get:
      tags:
        - Customer
      summary: Get customer's phone numbers by id.
      parameters:
        - allOf:
            - $ref: '#components/parameters/id'
          name: customerId
        - $ref: '#components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError' 
components:
  schemas:
    ModelBase:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Guid id.
          example: be5d9875-38d9-43be-86e7-9117ff3385d1 
        state:
          type: boolean
          readOnly: true
          description: Records valid or invalid state.
          example: true      
    Error:
      allOf:
        - $ref: '#/components/schemas/ModelBase'    
        - type: object
          properties:
            type:
              type: string
              description: Error type.
              example: NullPointerException
            code:
              type: string
              description: Error code.
              example: 12345
            level:
              type: string
              description: Error level.
              enum: [Error, Fatal, Warning, Info, Debug]
              example: Error          
            message:
              type: string
              description: User friendly error message.
              example: Invalid field name used in searching.
            stackTrace:
              type: string
              description: Error stack trace. It can be null for securtiy reasons.
            help:
              type: string
              description: Help url or instructions for taken error.
    Address:
      description: 
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object
          properties:
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Customer number.
              example: 123456789                     
            countryCode:
              type: string
              description: Countries ISO 3166-1 Alpha-3 code.
              example: TUR
            provinceName:
              type: string
              description: City/Region name.
              example: Ä°stanbul
            districtName:
              type: string
              description: City's district name.
              example: KadÄ±kÃ¶y
            addressLine:
              type: string
              description: Street address, unit, building, floor etc..
              example: X street, Y apartment, floor:2, no:3
            postalCode:
              type: number
              format: int32
              description: Address zip/postal code.
              example: 34744
            addressType:
              type: string
              description: Address type.
              enum: [Home, Work]
              example: Home   
    PhoneNumber:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object    
          properties:
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Customer number.
              example: 123456789          
            callCode:
              type: number
              format: int32
              description: Country call code.
              example: 90
            phoneNumber:
              type: number
              format: int32
              description: Phone number
              example: 1234567
            phoneNumberType:
              type: string
              description: Phone number type.
              enum: [Home, Work]
              example: Home                    
    Customer:
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - type: object      
          properties:      
            customerNumber:
              type: integer
              format: int64
              readOnly: true
              description: Customer number.
              example: 123456789
            status:
              type: string
              description: Customer status.
              enum: [Active, Closed]
              example: Active                          
    RetailCustomer:
      description: Retail customer is as self representative as he/she will come up to use services for themselves, using their own money 
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            firstName:
              type: string
              description: Retail customer first name.
              example: Arleta
            lastName:
              type: string
              description: Retail customer last name.
              example: Kleinhaut   
            nationality:
              type: string
              description: Retail customer nationality.
              example: TUR                            
            nationalId:
              type: number
              format: int64
              description: Retail customer national id.
              example: 12345678912
            gender:
              type: string
              description: Customer gender.
              enum: [Female,Male]
              example: Female
            birthPlace:
              type: string
              description: Retail customer birth place.
              example: Ä°stanbul    
            birthDate:
              type: string
              format: date
              description: Retail customer birth date.
              example: 2017-07-21                              
    CorporateCustomer:
      description: Corporate customer is a companyâ€™s representative as he/she will come up to use services for the company, using the companyâ€™s money.                 
      allOf:
        - $ref: '#/components/schemas/DepositAccount'
        - type: object
          properties:
            taxId:
              type: number
              format: int64
              description: Corporate customer tax id.
              example: 1234567890      
            name:
              type: string
              description: Corporate customer name.
              example: Wordware              
  parameters:
    limit:
      name: limit
      in: query
      description: Limits return data count.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 10
      schema:
        type: integer
        format: int32
        minimum: 1
    offset:
      name: offset
      in: query
      description: Offset data value.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 0
      schema:
        type: integer
        format: int32
        minimum: 0
    sorts:
      name: sorts
      in: query
      description: Sort by columns. Multiple column can be provided by comma seperated. Use + for desc - for asc.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: +field_name1,-field_name2
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: Filters result data with given field names. Multiple column can be provided by comma seperated.
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1,field_name2
      schema:
        type: string
    searches:
      name: searches
      in: query
      description: Searches data with given conditions. Multiple column can be provided by comma seperated.<br>Operators can be used =, !=, >, <, >=, <=, % (like), !% (notlike), ^% (ends with), %^ (starts with), !^% (not ends with), !%^ (not starts with)
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1[>=]250,field_name2[<]500
      schema:
        type: string        
    id:
      name: id
      in: path
      description: Unique id.
      required: true
      schema:
        type: string
        description: Guid id.
        example: be5d9875-38d9-43be-86e7-9117ff3385d1
  responses:
    500ApiError:
      description: API malfunction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    400InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'



----------------------




openapi: 3.0.0
info:
  title: o-bank Parameter API
  description: Parameter REST API for o-bank. This API has whole operations about parameters which be consume by ui.<br>Developed in NodeJS (Express)
  version: 1.0.0
  contact:
    name: Onur Ã–ZEL
    url: https://github.com/onur-ozel/o-bank
    email: onurozel41@gmail.com
  license:
    name: MIT License
    url: https://github.com/onur-ozel/o-bank/blob/master/LICENSE
tags:
  - name: Country
    description: Operations about country parameters.
  - name: Currency
    description: Operations about currency parameters.
paths:
  /parameter/api/v1/countries:
    get:
      tags:
        - Country
      summary: Gets country parameters
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#components/parameters/limit'
        - $ref: '#components/parameters/offset'
        - allOf:
            - $ref: '#components/parameters/sorts'
          example: +id,-name
        - allOf:
            - $ref: '#components/parameters/fields'
          example: name,alpha2Code,capital
        - allOf:
            - $ref: '#components/parameters/searches'  
          example: subregion[=]Asia
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    post:
      tags:
        - Country
      summary: Creates new country parameter
      description: Id generated in api.
      requestBody:
        description: Parameter object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    put:
      tags:
        - Country
      summary: Update an existing parameter.
      description: Id field must be filled.
      requestBody:
        description: Parameter object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Country'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
  /parameter/api/v1/countries/{id}:
    delete:
      tags:
        - Country
      summary: Deletes an existing country parameter by id.
      parameters:
        - $ref: '#components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
    get:
      tags:
        - Country
      summary: Get country parameter by id.
      parameters:
        - $ref: '#components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
  
  /parameter/api/v1/currencies:
    get:
      tags:
        - Currency
      summary: Gets currency parameters
      description: Paging, sorting, searching and field filtering can be provided with query parameters.
      parameters:
        - $ref: '#components/parameters/limit'
        - $ref: '#components/parameters/offset'
        - allOf:
            - $ref: '#components/parameters/sorts'
          example: +id,-interest
        - allOf:
            - $ref: '#components/parameters/fields'
          example: accountNumber,balance,maturity,interest
        - allOf:
            - $ref: '#components/parameters/searches'  
          example: balance[>=]250,interest[<]1.15
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    post:
      tags:
        - Currency
      summary: Creates new currency parameter
      description: Id generated in api.
      requestBody:
        description: Parameter object that will be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'                                     
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
    put:
      tags:
        - Currency
      summary: Update an existing currency parameter.
      description: Id field must be filled.
      requestBody:
        description: Parameter object that needs to be updated.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Currency'
                - properties:
                    id:
                      readOnly: false
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'
  /parameter/api/v1/currencies/{id}:
    delete:
      tags:
        - Currency
      summary: Deletes an existing currency parameter by id.
      parameters:
        - $ref: '#components/parameters/id'
      responses:
        200:
          description: successful operation
          content: {}
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
    get:
      tags:
        - Currency
      summary: Get currency parameter by id.
      parameters:
        - $ref: '#components/parameters/id'      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        400:
          $ref: '#/components/responses/400InvalidRequest'
        500:
          $ref: '#/components/responses/500ApiError'      
components:
  schemas:
    ModelBase:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Guid id.
          example: be5d9875-38d9-43be-86e7-9117ff3385d1 
        state:
          type: boolean
          readOnly: true
          description: Records valid or invalid state.
          example: true    
    Error:
      allOf:
        - $ref: '#/components/schemas/ModelBase'    
        - type: object
          properties:
            type:
              type: string
              description: Error type.
              example: NullPointerException
            code:
              type: string
              description: Error code.
              example: 12345
            level:
              type: string
              description: Error level.
              enum: [Error, Fatal, Warning, Info, Debug]
              example: Error          
            message:
              type: string
              description: User friendly error message.
              example: Invalid field name used in searching.
            stackTrace:
              type: string
              description: Error stack trace. It can be null for securtiy reasons.
            help:
              type: string
              description: Help url or instructions for taken error.
    Country:
      allOf:
        - $ref: '#/components/schemas/ModelBase'    
        - type: object    
          properties:        
            flag:
              type: string
              description: Flag url.
              example: https://restcountries.eu/data/deu.svg 
            name:
              type: string
              description: Country name.
              example: Germany 
            alpha2Code:
              type: string
              description: Alpha2 code.
              example: DE       
            alpha3Code:
              type: string
              description: Alpha3 code.
              example: DEU                   
            capital:
              type: string
              description: Capital city.
              example: Berlin 
            region:
              type: string
              description: Country region.
              example: Europe 
            subregion:
              type: string
              description: Country subregion.
              example: Western Europe 
            demonym:
              type: string
              description: Country demonym.
              example: German 
            nativeName:
              type: string
              description: Country native name.
              example: Deutschland       
            numericCode:
              type: integer
              format: int32
              description: Parameter status.
              example: 276                                                                  
    Currency:
      allOf:
        - $ref: '#/components/schemas/ModelBase'    
        - type: object    
          properties:        
            name:
              type: string
              description: Flag url.
              example: https://restcountries.eu/data/deu.svg 
            code:
              type: string
              description: Country name.
              example: Germany 
            numericCode:
              type: string
              description: Country name.
              example: Germany 
            symbol:
              type: string
              description: Alpha2 code.
              example: DE                                                                                         
  parameters:
    limit:
      name: limit
      in: query
      description: Limits return data count.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 10
      schema:
        type: integer
        format: int32
        minimum: 1
    offset:
      name: offset
      in: query
      description: Offset data value.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: 0
      schema:
        type: integer
        format: int32
        minimum: 0
    sorts:
      name: sorts
      in: query
      description: Sort by columns. Multiple column can be provided by comma seperated. Use + for desc - for asc.
      required: false
      allowEmptyValue: true
      style: form
      explode: true
      example: +field_name1,-field_name2
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: Filters result data with given field names. Multiple column can be provided by comma seperated.
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1,field_name2
      schema:
        type: string
    searches:
      name: searches
      in: query
      description: Searches data with given conditions. Multiple column can be provided by comma seperated.<br>Operators can be used =, !=, >, <, >=, <=, % (like), !% (notlike), ^% (ends with), %^ (starts with), !^% (not ends with), !%^ (not starts with)
      required: false
      allowEmptyValue: true
      style: form
      example: field_name1[>=]250,field_name2[<]500
      schema:
        type: string        
    id:
      name: id
      in: path
      description: Unique id.
      required: true
      schema:
        type: string
        description: Guid id.
        example: be5d9875-38d9-43be-86e7-9117ff3385d1
  responses:
    500ApiError:
      description: API malfunction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    400InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'




----------------------




# Instructions for **o-bank** development and usage standarts.

## Table of Contents
1. [API Standard](#api)  
   1.1. [Naming](#api-naming)  
   1.2. [Functional](#api-functional)   
   1.3. [Http Response Code](#api-status)     
2. [Docker Standard](#docker)   
3. [Folder Structure Standard](#folder)   
4. [Swagger Standard](#swagger)  
5. [Data Model Standard](#data-model)  


<a name="api"></a>

## 1. API Standard  

<a name="api-naming"></a>

   - ### 1.1 Naming
        * Use **api name** first as prefix.
            > **_customer_**/api/v1/retail-customers
        * Use **api** prefix.
            > customer/**_api_**/v1/retail-customers
        * Use versioning. 
            > customer/api/**_v1_**/retail-customers
        * Use **plural** names, not singular.
        * Use **hypen** between words.
        * Use **lower case** letters.
            > customer/api/v1/**_retail-customers_**

<a name="api-functional"></a>

   - ### 1.2 Functional
        * Use swagger, all apis swagger links must be like {api-name}/      swagger
            > customer/**_swagger_**
        * Don't use crud prefixes like getX,saveY,deleteZ. Instead of this,      use HTTP GET, POST, DELETE etc.
            > - &#x2612; customer/api/v1/get-retail-customers
            > - &#x2611; customer/api/v1/retail-customers =>>  HTTP GET
        * Don't use verb names like getById. Instead of this, use path      parameter.
            > customer/api/v1/retail-customers/**_{id}_**
        * Use query parameter for paging, sorting, filtering etc. Excepts       id. Use path parameter for id.  
            > - &#x2612; customer/api/v1/retail-customers?**_id=5_**
            > - &#x2611; customer/api/v1/retail-customers/**_5_**
            > - &#x2612; customer/api/v1/retail-customers/**_offset/3/      limit/10_**
            > - &#x2611; customer/api/v1/retail-customers?**_offset=3&      limit=10_**  
        * All get methods which return full data must be sopport paging,        sorting, searching and filtering.
            * Paging format must be like **offset={offset}&limit={limit}**.
                > customer/api/v1/retail-customers?**_offset=10&limit=10_**
            * Sort format must be like **sorts={direction (+=asc,-=desc)}       {fieldname}**.
                > customer/api/v1/retail-customers?**_sorts=+id_**  
                > customer/api/v1/retail-customers?**_sorts=+age,-name_**                
            * Field filter format must be like **fields={fieldName1},       {fieldName2}**.
                > customer/api/v1/retail-customers?**_fields=id,first_name,     last_name_**
            * Search filter format must be like **searches={fieldName1}[    {operator}]{value}**.
                > customer/api/v1/retail-customers?**_searches=id[=]5_**


<a name="api-status"></a>

   - ### 1.3 Http Response Code
        * Use 200 for valid and successful request.
        * Use 400 for invalid consumer requests. Logically consumers fault.
            > Invalid parameter semantics.
            > Invalid parameter values.  
            > Invalid parameter format.                       
            > Invalid parameter logic.            
        * Use 500 for api malfunction. Logically apis fault. 
            > Unhandled exceptions.

<a name="docker"></a>

## 2. Docker Standard 
   * General docker-compose file which includes whole structure of ecosystem **with sample seed data** must be in project root folder with **_docker-compose.yml_** naming.
   * General docker-compose file which includes whole structure of ecosystem **without sample seed data** must be in project root folder with **_docker-compose.without.data.yml_** naming.
   * In general compose file
       * general utils like kafka, api gateways etc. ip's must be in 10.20.30.**51 - 100** range. ports must be in **5051 - 5100** range.  
       * databases like mongo, mssql, mysql etc. ip's must be in 10.20.30.**101 - 150** range. ports must be in **5101 - 5150** range.  
       * backoffice apis like customer (.net core), deposit (spring boot), parameter (nodejs) etc. ip's must be in 10.20.30.**151 - 200** range. ports must be in **5151 - 5200** range.  
       * frontend like customer (angular), deposit (react) etc. ip's must be in 10.20.30.**201 - 250** range. ports must be in **5201 - 5250** range.  
   * In general compose file
       > name of services must be in **_{module-name}.{type-name}.{technology}_** format.
       > > **parameter.data.mongo**  
       > > **customer.api.dotnet**  
       > > **deposit.ui.react**  
   * Api's folder must have a docker-compose file which includes database architecture used by api.
   These database architecture can be used for development, debugging etc.
       > +- **Customer.API**  
       > |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+- docker-compose.**_Customer.API_**.yml  
       > |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+- Docker.**_Customer.Data.MSSql.WithData_**.Dockerfile
   * Api must have a database docker file with seed data. This dockerfile must be in apis docker-compose file.
       > Inside docker-compose.**_Customer.API_**.yml  
       > > dockerfile: Docker.**_Customer.Data.MSSql.WithData_**.Dockerfile  
   * In local docker compose file which holds database architecture with seeded data, port mapping must be same as default port, url must be localhost. 
       > Inside docker-compose.**_Customer.API_**.yml   
       > > ports:  
       > > \- "1433:1433"

<a name="folder"></a>

## 3. Folder Structure Standard 
   * In api projects, naming conventions can be different (eg: Java use camelCase for method name but in .net PascalCase) but folder structure must includes these
       > +- **Deposit.API**  
       > |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+- controllers  
       > |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+- models  
       > |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+- infrastructure  
       > |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+- resources  
       > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+- swagger  
       > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+- {api_name}.{version}.yaml 

<a name="swagger"></a>

## 4. Swagger Standard 
   * In api projects, use swagger for documentation and testing. Use standalone swagger ui with seperate swagger.yaml file.
   <br>Yes, i know it breaks consistency between documentation and api, we have to synchronize swagger ui and api codes in this approach.
   <br>But rest controller code like below is contains lots of swagger documentation and its hard to read.
   <br>I think codes readability is much more important than docuementation consistency.
   <br>I dont want to annotation crowd, i prefer simple, readable codes.
      <details>
       <summary>Sample Nodejs Controller</summary>  

           **
           * @swagger
           * tags:
           *   - name: country
           *     description: country parameter service
           *
           
           **
           * @swagger
           * definition:
           *   country:
           *     properties:
           *       flag:
           *         type: string
           *       name:
           *         type: string
           *       alpha2Code:
           *         type: integer
           *       alpha3Code:
           *         type: string
           *       capital:
           *         type: string
           *       region:
           *         type: string
           *       subregion:
           *         type: integer
           *       demonym:
           *         type: string
           *       nativeName:
           *         type: string
           *       numericCode:
           *         type: string
           */
           
           **
           * @swagger
           * /country:
           *  get:
           *    summary: gets countries
           *    description: Gets country list. Optionaly can use with paging
           *    tags:
           *      - country
           *    parameters:
           *      - in: query
           *        name: pageIndex
           *        type: integer
           *        required: false
           *      - in: query
           *        name: pageSize
           *        type: integer
           *        required: false
           *    produces:
           *      - application/json
           *    responses:
           *      200:
           *        description: An array of countries
           *        schema:
           *          $ref: '#/definitions/country'
           */

           //Controller code is only this!!!
           router.get('/', (req, res, next) => {
             const country = new Country({
               ...req.body
             });
           
             country.save().then(createdCountry => {
               res.status(201).json({
                 message: 'Post added successfully',
                 post: createdCountry
               });
             });
           
             cacheManager.clearCache(cacheName);
           };
      </details>
      <details>
       <summary>Sample SpringBoot Controller</summary>  

            import io.swagger.annotations.Api;
            import io.swagger.annotations.ApiOperation;
            import io.swagger.annotations.ApiParam;
            import io.swagger.annotations.ApiResponse;
            import io.swagger.annotations.ApiResponses;

            @RestController
            @RequestMapping("deposit/api/v1/withdraw-deposit-accounts")
            @Api(value = "Withdraw Deposit Account Controller", description     =       "Withdraw Deposit Account Operations.")
            public class WithdrawDepositAccountController {
            
                @Autowired
                WithdrawDepositAccountService service;

                @RequestMapping(value = "", method = RequestMethod.GET,     produces =      "application/json")
                @ApiOperation(value = "View a list of available withdraw    deposit        accounts.
                For paging send 'offset' and 'limit' othervise returns full     data.       For sorting
                send 'sort' ")
                @ApiResponses(value = {
                @ApiResponse(code = 200, message = "Successfully retrieved  list",
                responseContainer = "List", response =  WithdrawDepositAccount.class),
                @ApiResponse(code = 404, message = "The resource you were   trying to         reach is
                not found") })
                public String get(@RequestParam("offset") Integer offset,          @RequestParam("limit") Integer limit,
                        @RequestParam("sorts") String sorts, @RequestParam  ("fields")        String fields,
                        @RequestParam("searches") String searches) throws          JsonProcessingException {
                        
                    return service.get(offset, limit, sorts, fields,    searches);
                }

                @ApiOperation(value = "Add new withdraw deposit account")
                @RequestMapping(value = "", method = RequestMethod.POST,    produces =         "application/json")
                public void add(@RequestBody WithdrawDepositAccount account)    {
                    //Controller code is only this!!!
                    service.add(account);
                }
            } 
      </details>

<a name="data-model"></a>

## 5. Data Model Standard
   * All models must have id column which is guid.
   * All models must have state column which is boolean. This column represent record valid state. In o-bank ecosystem, no records must delete. For records that are invalid or to be deleted, the value must be set to false.
